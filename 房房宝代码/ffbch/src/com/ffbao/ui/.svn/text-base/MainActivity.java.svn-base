package com.ffbao.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.Toast;

import com.ffbao.activity.R;
import com.ffbao.engine.impl.GetUserDetailEngine;
import com.ffbao.net.CallBackListener;
import com.ffbao.net.HttpClientRequest;
import com.ffbao.ui.fragment.CustomFragment;
import com.ffbao.ui.fragment.HousesListFragment;
import com.ffbao.ui.fragment.LogicFragment;
import com.ffbao.ui.fragment.SettingsFragment;
import com.ffbao.util.Constant;
import com.ffbao.util.DisplayUtils;
import com.ffbao.util.ExecuteJSONUtils;
import com.ffbao.util.ExitActivity;
import com.ffbao.util.RoleUtils;
import com.ffbao.util.SharedPrefConstance;
import com.ffbao.util.UrlUtil;
/**
 * 
 * @FileName:MainActivity.java
 * @Deprecatred:
 * @CopyRright (c) 2014-ffbmobile1.0.0
 * @File Numbers:MainActivity.java
 * @author lee
 * @create Date2014-11-4
 * @Update Author: 
 * @Update Date:
 * @version 1.0.0
 * @Funtion: 主要操作界面
 */
public class MainActivity extends BaseActivity {

	private long exitTime = 0;

	private RadioButton msgsTab;
	private RadioButton appsTab;
	private RadioButton contactsTab;
	private RadioButton settingsTab;

	private ImageView unreadMeetingsImg;
	private ImageView unreadContactsImg;
	private ImageView unreadSettingsImg;


	private List<String> fragmentNameList = new ArrayList<String>();
	private List<RadioButton> radioBtnList = new ArrayList<RadioButton>();

	private String currentFragment ="" ;

	private String userid = "";
	private String companyid = "";
	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		setContentView(R.layout.ffb_activity_main);
		userid = SharedPrefConstance.getStringValue(context, SharedPrefConstance.userid);
		companyid = SharedPrefConstance.getStringValue(context, SharedPrefConstance.companyid);
		ExitActivity.addActivity(this);
		View view = findViewById(R.id.rl_chat_nv);
		view.setVisibility(View.GONE);
		init1();
		autologin();
	}
	/**
	 * @Deprecatred:
	 * @date:2014-11-13
	 * @author:lee
	 * @Funtion: 更新数据 用户数据
	 */
	private void getUserDetail() {
		GetUserDetailEngine userDetail = new GetUserDetailEngine(MainActivity.this);
		// 更新数据
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(Constant.commandText, UrlUtil.userGetDetail);
		map.put(Constant.UUID, SharedPrefConstance.getStringValue(
				MainActivity.this, SharedPrefConstance.UUID, ""));
		map.put(Constant.userid, SharedPrefConstance.getStringValue(
				MainActivity.this, SharedPrefConstance.userid, ""));
		showlog("登录后更新数据：发送map="+map);
		userDetail.execute(map, new CallBackListener() {
			@Override
			public void onSuccess(String msg) {
				showlog("登录后更新数据：返回msg="+msg);
				ExecuteJSONUtils.getUserDetails(MainActivity.this, msg);
				showlog("数据刷新，现在的角色为="+RoleUtils.getRoleName());
				verifyUpdate();
			}
			@Override
			public void onFailure(Exception error, String msg) {
			}
		});
	}

	private void init1() {
		showlog("执行插入4fragement");
		fragmentNameList.clear();
		fragmentNameList.add(HousesListFragment.TAG);
		fragmentNameList.add(CustomFragment.TAG);
		fragmentNameList.add(LogicFragment.TAG);
		fragmentNameList.add(SettingsFragment.TAG);
		initBootomBar();

	}

	private void initBootomBar() {
		unreadMeetingsImg = (ImageView) findViewById(R.id.main_tab_meetings_unread_text);
		unreadContactsImg = (ImageView) findViewById(R.id.main_tab_contacts_unread_text);
		unreadSettingsImg = (ImageView) findViewById(R.id.main_tab_settings_unread_text);

		msgsTab = (RadioButton) findViewById(R.id.main_tab_msgs);
		appsTab = (RadioButton) findViewById(R.id.main_tab_apps);
		contactsTab = (RadioButton) findViewById(R.id.main_tab_contacts);
		settingsTab = (RadioButton) findViewById(R.id.main_tab_settings);
		String version=android.os.Build.VERSION.SDK;
		int ver=Integer.parseInt(version);
		if(ver>14){
		}else {
			appsTab.setBackgroundResource(R.drawable.ffb_bel_tab_meetings);
		}

		radioBtnList.add(msgsTab);
		radioBtnList.add(appsTab);
		radioBtnList.add(contactsTab);
		radioBtnList.add(settingsTab);

		msgsTab.setOnClickListener(mOnClickListener);
		appsTab.setOnClickListener(mOnClickListener);
		contactsTab.setOnClickListener(mOnClickListener);
		settingsTab.setOnClickListener(mOnClickListener);
		msgsTab.performClick();
	}

	OnClickListener mOnClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {

			switch (v.getId()) {
			case R.id.main_tab_msgs:
				highLightTab(HousesListFragment.class.getName());
				break;
			case R.id.main_tab_apps:
				highLightTab(LogicFragment.class.getName());
				break;
			case R.id.main_tab_contacts:
				highLightTab(CustomFragment.class.getName());
				break;
			case R.id.main_tab_settings:
				highLightTab(SettingsFragment.class.getName());
				break;
			}
		}
	};

	private void highLightTab(RadioButton selectTab) {
		for (RadioButton tab : radioBtnList) {
			if (tab == selectTab) {
				tab.setChecked(true);
			} else {
				tab.setChecked(false);
			}
		}
	}

	private void highLightTab(String fname) {
		currentFragment = fname;


		if (HousesListFragment.class.getName().equals(fname)) {

			HouseActionShow();

		} else if (LogicFragment.class.getName().equals(fname)) {

			showFragment(LogicFragment.class.getName(), LogicFragment.TAG);
			highLightTab(appsTab);
		} else if (CustomFragment.class.getName().equals(fname)) {

			CustomActionbarShow();
		} else if (SettingsFragment.class.getName().equals(fname)) {

			showFragment(SettingsFragment.class.getName(), SettingsFragment.TAG);
			highLightTab(settingsTab);
		}
	}
	private void CustomActionbarShow() {
		showFragment(CustomFragment.class.getName(), CustomFragment.TAG);
		highLightTab(contactsTab);
	}


	private void HouseActionShow() {
		showFragment(HousesListFragment.class.getName(), HousesListFragment.TAG);
		highLightTab(msgsTab);
	}

	private void showFragment(String fname, String tag) {
		String currentUserid = SharedPrefConstance.getStringValue(context, 
				SharedPrefConstance.userid);
		String currentCompanyid = SharedPrefConstance.getStringValue(context, 
				SharedPrefConstance.companyid);

		FragmentTransaction ft = getSupportFragmentManager().beginTransaction();

		Fragment fragment = getSupportFragmentManager().findFragmentByTag(tag);

		if(!userid.equals(currentUserid)){
			for (String name : fragmentNameList) {
				Fragment toHide = getSupportFragmentManager().findFragmentByTag(name);
				if(toHide != null){
					ft.hide(toHide);
					ft.remove(toHide);

				}
			}
			userid = currentUserid;
			fragment = Fragment.instantiate(MainActivity.this, fname);
		}


		if (fragment == null) {
			fragment = Fragment.instantiate(MainActivity.this, fname);
		}

		for (String name : fragmentNameList) {
			Fragment toHide = getSupportFragmentManager().findFragmentByTag(name);
			if (toHide != null && toHide.isVisible()) {
				if (toHide.isVisible()) {
					ft.hide(toHide);
				}
			}
		}
		if (fragment.isAdded()) {

			ft.show(fragment);
			if(!currentCompanyid.equals(companyid) && CustomFragment.class.getName().equals(fname)){
				fragment.onResume();
			}
		} else {

			ft.add(R.id.main_fragment_container, fragment, tag);
		}
		ft.commitAllowingStateLoss();
	}

	@Override
	public void onBackPressed() {
		moveTaskToBack(false);
	}

	public void showBackToLogin() {
		AlertDialog.Builder bd = new AlertDialog.Builder(MainActivity.this);
		bd.setTitle(R.string.warning);
		bd.setMessage(R.string.is_conflicted);
		bd.setCancelable(false);
		bd.setPositiveButton("确认", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				Intent intent = new Intent();
				intent.setClass(MainActivity.this, LoginActivity.class);
				startActivity(intent);
				//				finish();
				overridePendingTransition(R.anim.ffb_alpha_in, R.anim.ffb_alpha_out);
			}
		});
		bd.create();
		bd.show();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if (event.getAction() == KeyEvent.ACTION_DOWN
					&& event.getRepeatCount() == 0) {
				this.exitApp();
			}
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	/**
	 * 退出程序
	 */
	private void exitApp() {
		// 判断2次点击事件时间
		if ((System.currentTimeMillis() - exitTime) > 2000) {
			Toast.makeText(MainActivity.this, "再按一次退出程序", Toast.LENGTH_SHORT)
			.show();
			exitTime = System.currentTimeMillis();
		} else {
			DisplayUtils.setUnRefresh();
			finish();
		}
	}

	@Override
	protected void onResume() {

		if(currentFragment.length()!=0){
			highLightTab(currentFragment);
		}
		super.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
	}
	/**
	 * 进入oncreat 自动登录
	 */
	private void autologin() {
		String username=SharedPrefConstance.getStringValue(MainActivity.this, SharedPrefConstance.username);
		String password=SharedPrefConstance.getStringValue(MainActivity.this, SharedPrefConstance.password);
		if(!"".equals(username) && !"".equals(password)){
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(Constant.commandText, UrlUtil.userLogin);
			map.put(Constant.account, username);
			map.put(Constant.password, password);
			map.put(Constant.clientIdentity, "Android");
			showlog("执行自动登录，发送数据map="+map);
			HttpClientRequest.getHttpPost(this, map, new CallBackListener() {

				@Override
				public void onSuccess(String msg) {
					showlog("执行自动登录，返回数据="+msg);
					try {
						JSONObject jsonObject=new JSONObject(msg);
						String status=jsonObject.getString("status");
						String message=jsonObject.getString("message");
						if("19".equals(status) && "密码无效".equals(message)){
							SharedPrefConstance.setSharePref(MainActivity.this, SharedPrefConstance.userid, "");
							SharedPrefConstance.setSharePref(MainActivity.this, SharedPrefConstance.UUID, "");
							Map<String, Object> map = new HashMap<String, Object>();
							map.put(Constant.commandText, UrlUtil.userLogout);
							map.put(Constant.userid, SharedPrefConstance.getStringValue(
									MainActivity.this, SharedPrefConstance.userid, ""));
							map.put(Constant.UUID, SharedPrefConstance.getStringValue(
									MainActivity.this, SharedPrefConstance.UUID, ""));
							showlog("发送注销用户-map为："+map);
							HttpClientRequest.getHttpPost(MainActivity.this, map,
									new CallBackListener() {
								@Override
								public void onSuccess(String msg) {
									showlog("发送注销用户返回="+msg);
								}
								@Override
								public void onFailure(Exception error, String msg) {
								}
							});
							showlog("帐号和密码错误，执行清除缓存，重新登录");
						}else{
							if (ExecuteJSONUtils.login(MainActivity.this, msg)) {
								getUserDetail();
							}
						}
					} catch (JSONException e) {
						e.printStackTrace();
					}
				}
				@Override
				public void onFailure(Exception error, String msg) {
				}
			});
		}else {
			showlog("没有执行自动登录");
		}
	}
}
